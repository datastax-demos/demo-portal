# -*- mode: ruby -*-
# vi: set ft=ruby :

if !ENV['AWS_ACCESS_KEY'] ||
   !ENV['AWS_SECRET_KEY']

    print 'The following environment variables must be set'
    print " before running this script:\n"
    print "\tAWS_ACCESS_KEY\n"
    print "\tAWS_SECRET_KEY\n"
    exit
end

if !ENV['USER_EMAIL']
    ENV['USER_EMAIL'] = 'demos@datastax.com'
end

if !ENV['DEMO']
    ENV['DEMO'] = 'connected-office'
end

if !ENV['TTL']
    ENV['TTL'] = '2'
end

if !ENV['TIME']
    require 'time'
    ENV['TIME'] = Time.now.to_i.to_s
end

if !ENV['PORT']
    ENV['PORT'] = '3000'
end

if !ENV['AWS_AZ']
    ENV['AWS_AZ'] = 'us-east-1a'
end

if !ENV['DEMOS_WEB_GUI']
    ENV['DEMOS_WEB_GUI'] = '../..'
end

if !ENV['CMD']
    ENV['CMD'] = ''
end

MAX_NODES = 10

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = '2'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = 'ubuntu/trusty64'
    config.vm.synced_folder '.', '/vagrant', disabled: true
    config.vm.synced_folder ENV['DEMOS_WEB_GUI'],
                            '/home/vagrant/webapps/demos-web-gui',
                            create: true

    config.vm.provider 'virtualbox' do |vb|
        vb.memory = 1024
        vb.cpus = 2
        vb.name = 'DataStax Demo Machine'
    end

    config.vm.provider :aws do |aws, override|

        override.vm.box = 'aws-dummy'
        override.ssh.username = 'ubuntu'
        override.vm.synced_folder ENV['DEMOS_WEB_GUI'],
                                  '/home/ubuntu/webapps/demos-web-gui',
                                  type: 'rsync'

        aws.access_key_id = ENV['AWS_ACCESS_KEY']
        aws.secret_access_key = ENV['AWS_SECRET_KEY']
        aws.region = 'us-east-1'
        aws.availability_zone = ENV['AWS_AZ']
        aws.keypair_name = 'joaquin.rightscale.sales'
        override.ssh.private_key_path = '~/.ssh/joaquin.rightscale.sales.key'

        # ubuntu 14.04 20140927 release
        aws.region_config 'us-east-1' do |region|
            region.ami = 'ami-d0ba0cb8'
        end

        aws.instance_type = 'm1.large'
        aws.security_groups = ['demos-webgui-launcher', 'dse', 'demos-webapp']

        aws.tags = {
            'Name' => ENV['DEMO'],
            'provisioner' => 'demos-web-gui-launcher',
            'email' => ENV['USER_EMAIL'],
            'launch_time' => ENV['TIME'],
            'ttl' => ENV['TTL'],
            'app_port' => ENV['PORT'],
            'status' => 'Initializing...',
        }
    end

    config.vm.provision :shell, path: 'bootstrap.sh', privileged: false

    (0..MAX_NODES).each do |i|
        config.vm.define "dse#{i}" do |dse|

            config.vm.provision 'docker',
                images: ['datastaxdemos/datastax-enterprise']

            if !ENV['CMD'].empty?
                dse.vm.provision 'docker' do |d|
                    d.run 'datastaxdemos/datastax-enterprise',
                        cmd: ENV['CMD'],
                        args: '--net host'
                end
            end
        end
    end

    config.vm.define 'opscenter' do |opscenter|

        opscenter.vm.provision 'docker',
            images: ['datastaxdemos/opscenter']

        if !ENV['CMD'].empty?
            opscenter.vm.provision 'docker' do |d|
                d.run 'datastaxdemos/opscenter',
                    cmd: ENV['CMD'],
                    args: '--net host'
            end
        end
    end

    config.vm.define 'connected-office' do |coffice|

        config.vm.provision 'docker',
            images: ['datastaxdemos/connected-office']

        if !ENV['CMD'].empty?
            coffice.vm.provision 'docker' do |d|
                d.run 'datastaxdemos/connected-office',
                    cmd: ENV['CMD'],
                    args: '--net host'
            end
        end
    end

    config.vm.box_check_update = true
end
